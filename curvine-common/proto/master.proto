syntax="proto2";
package proto;

option java_package = "io.curvine.proto";
option java_multiple_files = true;
option java_outer_classname = "MasterProto";

import "common.proto";

message MkdirOptsProto {
    required bool create_parent = 1;
    required uint32 mode = 2;
    map<string, bytes> x_attr = 3;
    required StoragePolicyProto storage_policy = 4;
}

// File system, master related requests
// Create a directory request.
message MkdirRequest {
    required string path = 1;
    required MkdirOptsProto opts = 2;
}

message MkdirResponse {
    required bool flag = 1;
}

message CreateFileOptsProto {
    required int32 create_flag = 1 [default = 1];
    required bool create_parent = 2;

    required FileTypeProto file_type = 3 [default = FILE_TYPE_PROTO_FILE];
    required int32 replicas = 4 [default = 1];
    required int64 block_size = 5 [default = 134217728];
    map<string, bytes> x_attr = 6;
    required StoragePolicyProto storage_policy = 7;
    required string client_name = 8 [default = "localhost"];
    required uint32 mode = 9;
}

// Create a file.
message CreateFileRequest {
    required string path = 1;
    required CreateFileOptsProto opts = 2;
}

message CreateFileResponse {
    required FileStatusProto file_status = 1;
}

// Delete directories or files.
message DeleteRequest {
    required string path = 1;
    required bool recursive = 2;
}

message DeleteResponse {}

message GetFileStatusRequest {
    required string path = 1;
}

message GetFileStatusResponse {
    required FileStatusProto status = 1;
}

message ExistsRequest {
    required string path = 1;
}

message ExistsResponse {
    required bool exists = 1;
}

// Get the list.
message ListStatusRequest {
    required string path = 1;
    required bool need_location = 2;
}

message ListStatusResponse {
    repeated FileStatusProto statuses = 1;
}

// Rename.
message RenameRequest {
    required string src = 1;
    required string dst = 2;
}

message RenameResponse {
    required bool result = 1;
}

// Apply for allocation of blocks.
message AddBlockRequest {
    required string path = 1;
    optional CommitBlockProto previous = 2;
    repeated WorkerAddressProto exclude_workers = 3;
    required bool located = 4 [default = true];
    required ClientAddressProto client_address = 5;
}

message AddBlockResponse {
    required LocatedBlockProto block = 1;
}

// File writing is completed.
message CompleteFileRequest {
    required string path = 1;
    required int64 len = 2;
    required string client_name = 3;
    optional CommitBlockProto last = 4;
}

message CompleteFileResponse {
    required bool result = 1;
}

// Get the block of the file.
message GetBlockLocationsRequest {
    required string path = 1;
}

message GetBlockLocationsResponse {
    required FileBlocksProto blocks = 1;
}

// Request master profile information.
message GetMasterInfoRequest {

}

message GetMasterInfoResponse {
    required string active_master = 1;
    repeated string journal_nodes = 2;

    required int64 inode_num = 3;
    required int64 block_num = 4;
    required int64 capacity = 5;
    required int64 available = 6;
    required int64 fs_used = 7;
    required int64 non_fs_used = 8;
    required int64 reserved_bytes = 9 [default = 0];

    repeated WorkerInfoProto live_workers = 11;
    repeated WorkerInfoProto blacklist_workers = 12;
    repeated WorkerInfoProto decommission_workers = 13;
    repeated WorkerInfoProto lost_workers = 14;
}

message AppendFileRequest {
    required string path = 1;
    required CreateFileOptsProto opts = 2;
}

message AppendFileResponse {
    required FileStatusProto file_status = 1;
    optional LocatedBlockProto last_block = 2;
}

message SetAttrOptsProto {
    required bool recursive = 1;
    optional int32 replicas = 2;
    optional string owner = 3;
    optional string group = 4;
    optional uint32 mode = 5;
    optional int64 ttl_ms = 6;
    optional TtlActionProto ttl_action = 7;
    map<string, bytes> add_x_attr = 8;
    repeated string remove_x_attr = 9;
}

message SetAttrRequest {
    required string path = 1;
    required SetAttrOptsProto opts = 2;
}

message SetAttrResponse {
}

message SymlinkRequest {
    required string target = 1;
    required string link = 2;
    required bool force = 3;
    required uint32 mode = 4;
}

message SymlinkResponse {
}
