syntax = "proto2";
package proto;

option java_package = "io.curvine.proto";
option java_multiple_files = true;
option java_outer_classname = "LoadProto";

import "common.proto";

// Loading task status enumeration
enum LoadState {
  PENDING = 0;
  LOADING = 1;
  COMPLETED = 2;
  FAILED = 3;
  CANCELED = 4;
}

message LoadJobOptionsProto {
  optional int32 replicas = 2;
  optional int64 block_size = 3;
  optional StorageTypeProto storage_type = 4;
  optional int64 ttl_ms = 5;
  optional TtlActionProto ttl_action = 6;
}

// Submit a load task request
message LoadJobRequest {
  // External file path, which may be a folder, for example: s3://my-bucket/test.text
  required string path = 1;
  // Cache time, format: number + unit (s/m/h/d/w), for example: 10d means 10 days
  required LoadJobOptionsProto job_options = 2;
}

// Submit the load task response
message LoadJobResponse {
  // Task ID
  required string job_id = 1;
  // Target path
  required string target_path = 2;
}

// Cancel the load task request
message CancelLoadRequest {
  // Task ID
  required string job_id = 1;
}

// Cancel the task response
message CancelLoadResponse {
  // Whether it was successfully cancelled
  required bool success = 1;
  // information
  optional string message = 2;
}

// Load task metric information
message LoadMetrics {
  // Task ID
  required string job_id = 1;
  // task_id corresponds to a file
  required string task_id = 2;
  // The corresponding file of task_id is not a folder
  required string path = 3;
  // Target path
  required string target_path = 4;
  // Total size (bytes)
  optional int64 total_size = 5;
  // Loaded size (bytes)
  optional int64 loaded_size = 6;
  // Creation time (millisecond timestamp)
  optional int64 create_time = 7;
  // Update time (millisecond timestamp)
  optional int64 update_time = 8;
  // Expiration time (millisecond timestamp)
  optional int64 expire_time = 9;
}

// Query the load task status request
message GetLoadStatusRequest {
  // Task ID
  required string job_id = 1;
  // Whether to display detailed information
  optional bool verbose = 2 [default = false];
}

// Query the status response of loading tasks
message GetLoadStatusResponse {
  // Task ID
  required string job_id = 1;
  // External file path
  required string path = 2;
  // Target path
  required string target_path = 3;
  // Task status
  required LoadState state = 4;
  // Status message
  optional string message = 5;
  // Task indicator information
  optional LoadMetrics metrics = 6;
}

// Load data instructions, send to the Worker side on the Server side. If the path is a folder, it will be recursively divided according to the file granularity.
message LoadTaskRequest {
  required string job_id = 1;
  required string source_path = 2;
  required string target_path = 3;

  required int32 replicas = 4;
  required int64 block_size = 5;
  required StorageTypeProto storage_type = 6;
  required int64 ttl_ms = 7;
  required TtlActionProto ttl_action = 8;
}

// Worker responds to the LoadTaskRequest submitted by the Server side and allocates a task_id
message LoadTaskResponse {
  required string job_id = 1;
  // task_id corresponds to a file
  required string task_id = 2;
  // Target path
  required string target_path = 3;
  // information
  optional string message = 4;
}

// Worker side regularly reports the execution status of loading tasks
message LoadTaskReportRequest {
  // Task ID
  required string job_id = 1;
  // Task status
  required LoadState state = 2;
  // worker ID
  required int32 worker_id = 4;
  // Task indicator information
  optional LoadMetrics metrics = 5;
  // Status message
  optional string message = 6;
}

// Worker reports task status response
message LoadTaskReportResponse {
  // Whether it is successfully received
  required bool success = 1;
  // information
  optional string message = 2;
}
