# Default values for curvine-csi
# This is a YAML-formatted file.

# Global settings
global:
  namespace: default

# Image settings
image:
  repository: curvine/curvine-csi
  tag: latest
  pullPolicy: Always

# CSI Driver settings
csiDriver:
  name: curvine
  attachRequired: true
  podInfoOnMount: false

# Controller settings
controller:
  name: curvine-controller
  replicas: 1
  priorityClassName: system-cluster-critical

  # Controller container settings
  container:
    name: csi-plugin
    command: ["/opt/curvine/bin/csi"]
    args:
      - --endpoint=$(CSI_ENDPOINT)
      - --nodeid=$(NODE_NAME)
    env:
      CSI_ENDPOINT: unix:///csi/csi.sock

    # Liveness probe settings
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthz
        port: healthz
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 3

    # Ports
    ports:
      healthz: 9909

    # Security context
    securityContext:
      privileged: true
      capabilities:
        add:
          - SYS_ADMIN

  # Sidecar containers
  sidecars:
    provisioner:
      image: quay.io/k8scsi/csi-provisioner:v1.6.0
      args:
        - --csi-address=$(ADDRESS)
        - --timeout=60s
        - --v=5

    attacher:
      image: registry.k8s.io/sig-storage/csi-attacher:v4.5.0
      args:
        - --csi-address=$(ADDRESS)
        - --v=5

    livenessProbe:
      image: registry.k8s.io/sig-storage/livenessprobe:v2.11.0
      args:
        - --csi-address=$(ADDRESS)
        - --health-port=$(HEALTH_PORT)
      env:
        HEALTH_PORT: "9909"

  # Tolerations
  tolerations:
    - key: CriticalAddonsOnly
      operator: Exists

# Node settings
node:
  name: curvine-csi-node
  priorityClassName: system-node-critical
  dnsPolicy: ClusterFirstWithHostNet

  # Node container settings
  container:
    name: csi-plugin
    command: ["/opt/curvine/bin/csi"]
    args:
      - --endpoint=$(CSI_ENDPOINT)
      - --nodeid=$(NODE_NAME)
    env:
      CSI_ENDPOINT: unix:///csi/csi.sock

    # Liveness probe settings
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthz
        port: healthz
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 3

    # Ports
    ports:
      healthz: 9909

    # Security context
    securityContext:
      privileged: true

    # Lifecycle
    lifecycle:
      preStop:
        exec:
          command:
            - /bin/sh
            - -c
            - rm /csi/csi.sock

  # Sidecar containers
  sidecars:
    nodeDriverRegistrar:
      image: quay.io/k8scsi/csi-node-driver-registrar:v2.1.0
      args:
        - --csi-address=$(ADDRESS)
        - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
        - --v=5
      env:
        ADDRESS: /csi/csi.sock
        DRIVER_REG_SOCK_PATH: /var/lib/kubelet/csi-plugins/csi.curvine.io/csi.sock
        CURVINE_CONF_FILE: /opt/curvine/conf/curvine-cluster.toml

    livenessProbe:
      image: registry.k8s.io/sig-storage/livenessprobe:v2.11.0
      args:
        - --csi-address=$(ADDRESS)
        - --health-port=$(HEALTH_PORT)
      env:
        ADDRESS: /csi/csi.sock
        HEALTH_PORT: "9909"

  # Tolerations
  tolerations:
    - operator: Exists

  # Host paths
  hostPaths:
    pluginDir:
      path: /var/lib/kubelet/csi-plugins/csi.curvine.io/
      type: DirectoryOrCreate
    kubeletDir:
      path: /var/lib/kubelet
      type: DirectoryOrCreate
    registrationDir:
      path: /var/lib/kubelet/plugins_registry/
      type: Directory

# Service Account settings
serviceAccount:
  controller:
    name: curvine-csi-controller-sa
  node:
    name: curvine-csi-node-sa

# RBAC settings
rbac:
  create: true

# ConfigMap settings
configMap:
  name: curvine-config
  defaultMode: 0755
  data:
    curvineClusterToml: |
      # Customer service configuration.
      [client]
      master_addrs = [
          { hostname = "localhost", port = 8995 }
      ]

      # fuse configuration
      [fuse]


      # The log configuration of the customer service side, and the customer service side of rust, java, and fuse use this log file.
      [log]
      level = "info"
      log_dir = "stdout"
      file_name = "curvine.log"

    curvineEnvSh: |
      export CURVINE_HOME="$(cd "$(dirname "$0")"/..; pwd)"
      export CURVINE_CONF_FILE=$CURVINE_HOME/conf/curvine-cluster.toml