# Use the official Rocky Linux 9 image as a base
FROM rockylinux:9

# Add metadata labels
ARG REPO_URL=https://github.com/curvineio/curvine
LABEL org.opencontainers.image.source="${REPO_URL}"

# 1. Install the basic toolchain and dependencies
RUN dnf install -y \
    fuse3 \
    fuse3-devel \
    clang \
    llvm \
    llvm-devel \
    git \
    wget \
    zip \
    unzip \
    nodejs \
    npm \
    java-1.8.0-openjdk-devel \
    openssl-devel \
    && dnf clean all

# 2. Install the Rust toolchain
# uncomment the following two lines if you met network problem
#ENV RUSTUP_UPDATE_ROOT=https://mirrors.aliyun.com/rustup/rustup
#ENV RUSTUP_DIST_SERVER=https://mirrors.aliyun.com/rustup
ENV PATH="/root/.cargo/bin:${PATH}"
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.88.0 && \
    source $HOME/.cargo/env && \
    rustup default 1.88.0 && \
    rustup component add clippy rustfmt rust-src rust-analyzer && \
    rustup target add x86_64-unknown-linux-gnu && \
    cargo install --force cargo-cache && \
    echo "Rust toolchain and components installed successfully"

# 3. Install protoc
RUN mkdir -p /app/protoc && cd /app/protoc && \
    curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v27.2/protoc-27.2-linux-x86_64.zip && \
    unzip protoc-27.2-linux-x86_64.zip && \
    chmod +x bin/protoc && \
    rm -f *.zip
ENV PATH="/app/protoc/bin:${PATH}"

# 4. Install Maven
RUN cd /app && \
    curl -LO https://downloads.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.tar.gz && \
    tar -xzf apache-maven-3.9.11-bin.tar.gz && \
    mv apache-maven-3.9.11 maven && \
    rm -f *.tar.gz
ENV PATH="/app/maven/bin:${PATH}"

#5. Replace the configuration
RUN mkdir -p /app/maven/conf
COPY curvine-docker/compile/settings.xml /app/maven/conf/settings.xml

RUN mkdir -p /root/.cargo
COPY curvine-docker/compile/config /root/.cargo/config.toml

# ============ DEPENDENCY CACHING SECTION ============

# 6. Cache Rust dependencies using original project config (most accurate method)
RUN mkdir -p /tmp/rust-deps
WORKDIR /tmp/rust-deps

# Use original project configuration files directly
COPY Cargo.toml ./
COPY Cargo.lock ./

# Create workspace member structure and generate minimal config files (merged into single RUN to reduce layers)
RUN mkdir -p curvine-common/src curvine-server/src curvine-client/src curvine-libsdk/src curvine-tests/src curvine-fuse/src curvine-web/src curvine-ufs/src curvine-cli/src orpc/src && \
    echo '[package]\nname = "curvine-common"\nversion = "0.1.0"\nedition = "2021"' > curvine-common/Cargo.toml && \
    echo '[package]\nname = "curvine-server"\nversion = "0.1.0"\nedition = "2021"' > curvine-server/Cargo.toml && \
    echo '[package]\nname = "curvine-client"\nversion = "0.1.0"\nedition = "2021"' > curvine-client/Cargo.toml && \
    echo '[package]\nname = "curvine-libsdk"\nversion = "0.1.0"\nedition = "2021"' > curvine-libsdk/Cargo.toml && \
    echo '[package]\nname = "curvine-tests"\nversion = "0.1.0"\nedition = "2021"' > curvine-tests/Cargo.toml && \
    echo '[package]\nname = "curvine-fuse"\nversion = "0.1.0"\nedition = "2021"' > curvine-fuse/Cargo.toml && \
    echo '[package]\nname = "curvine-web"\nversion = "0.1.0"\nedition = "2021"' > curvine-web/Cargo.toml && \
    echo '[package]\nname = "curvine-ufs"\nversion = "0.1.0"\nedition = "2021"' > curvine-ufs/Cargo.toml && \
    echo '[package]\nname = "curvine-cli"\nversion = "0.1.0"\nedition = "2021"' > curvine-cli/Cargo.toml && \
    echo '[package]\nname = "orpc"\nversion = "0.1.0"\nedition = "2021"' > orpc/Cargo.toml && \
    echo 'fn main() {}' > curvine-common/src/lib.rs && \
    echo 'fn main() {}' > curvine-server/src/main.rs && \
    echo 'fn main() {}' > curvine-client/src/main.rs && \
    echo 'fn main() {}' > curvine-libsdk/src/lib.rs && \
    echo 'fn main() {}' > curvine-tests/src/lib.rs && \
    echo 'fn main() {}' > curvine-fuse/src/main.rs && \
    echo 'fn main() {}' > curvine-web/src/lib.rs && \
    echo 'fn main() {}' > curvine-ufs/src/lib.rs && \
    echo 'fn main() {}' > curvine-cli/src/main.rs && \
    echo 'fn main() {}' > orpc/src/lib.rs

# Use original project config + Cargo.lock to cache exact dependencies
RUN cargo build --release || echo "Release build failed, continuing..."
RUN cargo build || echo "Debug build failed, continuing..."

# Clean up temporary directories
RUN rm -rf /tmp/rust-deps /tmp/node-deps /tmp/maven-deps

# ============ END DEPENDENCY CACHING SECTION ============

# Add useful aliases and settings to .bashrc for interactive sessions
RUN echo 'export PS1="\[\033[01;32m\]curvine\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc && \
    echo 'alias ll="ls -la"' >> /root/.bashrc && \
    echo 'alias cb="cargo build"' >> /root/.bashrc && \
    echo 'alias ct="cargo test"' >> /root/.bashrc && \
    echo 'alias cr="cargo run"' >> /root/.bashrc

# Add after all installation commands
RUN rm -rf \
    /var/cache/yum/* \
    /tmp/* \
    /var/tmp/*


WORKDIR /workspace

# Ensure environment is properly set up
RUN rustc --version && cargo --version && protoc --version && mvn --version

# Use ENTRYPOINT to ensure environment is loaded
ENTRYPOINT ["/bin/bash", "-c"]
CMD ["bash"]
